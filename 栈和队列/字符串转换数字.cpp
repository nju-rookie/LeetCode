/*
字符串转换整数

请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

提示：

本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。

*/



//解法一：用判断分支流程
//此题边界条件极为复杂，需要谨慎思考

/*

用双端队列 q  存储数字及其符号
1 ： 遇上空格' '
    1-1：   判断q中不为空---结束遍历   
    1-2：   为空---继续遍历
2 ： 遇上数字，直接进队列
3 ： 遇上其他字符  
    3-1： 遇上‘+’‘-’正负号 
            3-1-1：队列中只有正负号---return 0
            3-1-2：队列中有数字---结束遍历
            3-1-3：队列为空---进入队列
    3-2： 遇上其他字符
            3-2-1：队列为空---return 0
            3-2-2：队列中有数字---结束遍历


将队列中字符转换整数
1 ： 判断正负号
2 ： 判断是否溢出

*/

class Solution {
public:
    int myAtoi(string str) {
        string apart;
        long long ans = 0;
        int flag = 0;
        deque<char> q;
        for(auto c : str){

            //遇上空格' '，判断q中（1）不为空，结束遍历   （2）为空，继续遍历
            if(c == ' '){
                if(q.size() != 0)
                    break;
            }
            else{
                if(c < '0' || c > '9'){
                    if(c == '+' || c == '-'){
                        if(q.size() == 0)   q.push_back(c);
                        else{
                            if(q.size() != 0 && q.back() != '+' && q.back() != '-' )
                                break;
                            else
                                return 0;
                        }

                    }else{
                        if(q.size() == 0)
                            return 0;
                        else
                            break;
                    }              
                }else{
                    //遇上数字，直接进队列
                    q.push_back(c);
                }

            }
        }

        if(q.front() == '+')    {flag = 0;q.pop_front();}
        if(q.front() == '-')    {flag = 1;q.pop_front();}
        while(q.size() != 0){
            ans = 10*ans + (flag == 0 ? q.front() - '0' :  '0' - q.front());
            q.pop_front();
            if(ans > 2147483647)
                return 2147483647;
            if(ans < -2147483648)
                return -2147483648;
        }
        return int(ans);
    }
};